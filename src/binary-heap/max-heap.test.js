const BinaryHeap = require('./binary-heap.js')

describe('MaxHeap', () => {
  test('#insert, #max, #isEmpty', () => {
    let heap = BinaryHeap.MaxHeap()
    expect(heap.isEmpty()).toBeTruthy()
    expect(heap.max()).toBeNull()

    heap.insert(7, 'seven')
    expect(heap.max().key).toBe(7)
    expect(heap.max().value).toBe('seven')

    heap.insert(6, 'six')
    expect(heap.max().key).toBe(7)
    expect(heap.max().value).toBe('seven')
    expect(heap.nodes[0].key).toBe(7)
    expect(heap.nodes[1].key).toBe(6)

    // test default value is null
    heap.insert(8)
    expect(heap.max().key).toBe(8)
    expect(heap.max().value).toBe(null)
    expect(heap.nodes[0].key).toBe(8)
    expect(heap.nodes[1].key).toBe(6)
    expect(heap.nodes[2].key).toBe(7)
    
    heap.insert(3)
    expect(heap.max().key).toBe(8)
    expect(heap.nodes[0].key).toBe(8)
    expect(heap.nodes[1].key).toBe(6)
    expect(heap.nodes[2].key).toBe(7)
    expect(heap.nodes[3].key).toBe(3)

    heap.insert(11)
    expect(heap.max().key).toBe(11)
    expect(heap.nodes[0].key).toBe(11)
    expect(heap.nodes[1].key).toBe(8)
    expect(heap.nodes[2].key).toBe(7)
    expect(heap.nodes[3].key).toBe(3)
    expect(heap.nodes[4].key).toBe(6)

    heap.insert(12)
    expect(heap.max().key).toBe(12)
    expect(heap.nodes[0].key).toBe(12)
    expect(heap.nodes[1].key).toBe(8)
    expect(heap.nodes[2].key).toBe(11)
    expect(heap.nodes[3].key).toBe(3)
    expect(heap.nodes[4].key).toBe(6)
    expect(heap.nodes[5].key).toBe(7)
    
    heap.insert(15)
    expect(heap.max().key).toBe(15)
    expect(heap.nodes[0].key).toBe(15)
    expect(heap.nodes[1].key).toBe(8)
    expect(heap.nodes[2].key).toBe(12)
    expect(heap.nodes[3].key).toBe(3)
    expect(heap.nodes[4].key).toBe(6)
    expect(heap.nodes[5].key).toBe(7)
    expect(heap.nodes[6].key).toBe(11)

    heap.insert(17)
    expect(heap.max().key).toBe(17)
    expect(heap.nodes[0].key).toBe(17)
    expect(heap.nodes[1].key).toBe(15)
    expect(heap.nodes[2].key).toBe(12)
    expect(heap.nodes[3].key).toBe(8)
    expect(heap.nodes[4].key).toBe(6)
    expect(heap.nodes[5].key).toBe(7)
    expect(heap.nodes[6].key).toBe(11)
    expect(heap.nodes[7].key).toBe(3)
  })

  test('#extractMax', () => {
    let heap = BinaryHeap.MaxHeap()
    heap.insert(7).insert(6).insert(8).insert(3)
      .insert(11).insert(12).insert(15).insert(17)

    expect(heap.extractMax().key).toBe(17)
    expect(heap.nodes[0].key).toBe(15)
    expect(heap.nodes[1].key).toBe(8)
    expect(heap.nodes[2].key).toBe(12)
    expect(heap.nodes[3].key).toBe(3)
    expect(heap.nodes[4].key).toBe(6)
    expect(heap.nodes[5].key).toBe(7)
    expect(heap.nodes[6].key).toBe(11)

    expect(heap.extractMax().key).toBe(15)
    expect(heap.nodes[0].key).toBe(12)
    expect(heap.nodes[1].key).toBe(8)
    expect(heap.nodes[2].key).toBe(11)
    expect(heap.nodes[3].key).toBe(3)
    expect(heap.nodes[4].key).toBe(6)
    expect(heap.nodes[5].key).toBe(7)

    expect(heap.extractMax().key).toBe(12)
    expect(heap.nodes[0].key).toBe(11)
    expect(heap.nodes[1].key).toBe(8)
    expect(heap.nodes[2].key).toBe(7)
    expect(heap.nodes[3].key).toBe(3)
    expect(heap.nodes[4].key).toBe(6)

    expect(heap.extractMax().key).toBe(11)
    expect(heap.nodes[0].key).toBe(8)
    expect(heap.nodes[1].key).toBe(6)
    expect(heap.nodes[2].key).toBe(7)
    expect(heap.nodes[3].key).toBe(3)

    expect(heap.extractMax().key).toBe(8)
    expect(heap.nodes[0].key).toBe(7)
    expect(heap.nodes[1].key).toBe(6)
    expect(heap.nodes[2].key).toBe(3)

    expect(heap.extractMax().key).toBe(7)
    expect(heap.nodes[0].key).toBe(6)
    expect(heap.nodes[1].key).toBe(3)

    expect(heap.extractMax().key).toBe(6)
    expect(heap.nodes[0].key).toBe(3)

    expect(heap.extractMax().key).toBe(3)
    expect(heap.nodes[0]).toBeUndefined()
  })
})
